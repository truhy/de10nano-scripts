# Altera cyclone V SoC family, 5Cxxx
# Note: Intel/Terasic DE series kits JTAG chain order is FPGA, DAP then CPU

if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME fpgasoc
}

# Subsidiary TAP: fpga
if { [info exists FPGA_TAPID] } {
    set _FPGA_TAPID $FPGA_TAPID
} else {
    set _FPGA_TAPID 0x02d020dd
}
jtag newtap $_CHIPNAME.fpga tap -irlen 10 -ircapture 0x01 -irmask 0x3 -expected-id $_FPGA_TAPID

# CoreSight Debug Access Port
if { [info exists DAP_TAPID] } {
    set _DAP_TAPID $DAP_TAPID
} else {
    set _DAP_TAPID 0x4ba00477
}
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x01 -irmask 0x0f -expected-id $_DAP_TAPID

# Slow speed to be sure it will work
adapter speed 1000

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME1 $_CHIPNAME.cpu.0
set _TARGETNAME2 $_CHIPNAME.cpu.1

# Cortex-A9 core 0 target
target create $_TARGETNAME1 cortex_a -dap $_CHIPNAME.dap -coreid 0 -dbgbase 0x80110000
$_TARGETNAME1 configure -event reset-start { adapter speed 1000 }
$_TARGETNAME1 configure -event reset-assert-post "cycv_dbginit $_TARGETNAME1"

# Cortex-A9 core 1 target
target create $_TARGETNAME2 cortex_a -dap $_CHIPNAME.dap -coreid 1 -dbgbase 0x80112000
$_TARGETNAME2 configure -event reset-start { adapter speed 1000 }
$_TARGETNAME2 configure -event reset-assert-post "cycv_dbginit $_TARGETNAME2"

# Oddly, OpenOCD selects the highest core as default, we want the first core
targets $_CHIPNAME.cpu.0

# Enable core 1 automatically
#init
#halt
#cycv_c1
#resume

# ==========
# Procedures
# ==========

proc cycv_dbginit {target} {
    # General Cortex-A8/A9 debug initialisation
    $target cortex_a dbginit
	
	# Use this if you want to use software breakpoints
    #$target cortex_a dacrfixup on
	
    # Use this if you want debug stepping to not jump into another interrupt, i.e. interrupts are disabled when stepping
    #$target cortex_a maskisr on
}

# =============================================================================
# Support procedures for the Cyclone V SoC HPS (CPU system). Only tested on the
# DE-10 Nano development board but should work for the other Cyclone V
# development boards, e.g. DE1-SoC, DE10-Standard, Arrow SoCKit, etc.
# Feb 2023: Truong Hy
# =============================================================================

# Enable or disable MMU and cache
# OpenOCD generic Arm commands:
#   arm mcr pX op1 CRn CRm op2 value
#   arm mrc pX coproc op1 CRn CRm op2
proc cycv_cache {{target fpgasoc.cpu.0} {enable 0}} {
    # Invalidate cache & TLBs
    # ICIALLU: Invalidate Instruction Cache
    # TLBIALL: Invalidate entire Unified Main TLB
    $target arm mcr 15 0 7 5 0 0
    $target arm mcr 15 0 8 7 0 0

    # The MMU & cache is controlled by reading and writing the SCTLR (System Control Register)
    # Read SCTLR and store result into $r
    set r [$target arm mrc 15 0 1 0 0]
    # SCTLR bit mask:
    #   Bit12 = I-cache enable
    #   Bit11 = Branch prediction enable
    #   Bit2  = D-cache & L2 cache enable
    #   Bit0  = MMU enable
    set mask [expr {1 << 12 | 1 << 11 | 1 << 2 | 1 << 0}]
    if {$enable == 0} {
        echo "cycv_cache: Disabling MMU, i-cache & d-cache.."
        set r [expr {($r & ~$mask)}]
    } else {
        echo "cycv_cache: Enabling MMU, i-cache & d-cache.."
        set r [expr {($r | $mask)}]
    }
    # Write SCTLR
    $target arm mcr 15 0 1 0 0 $r
}

# CPU core 1 (the second core) is held in reset by default, and also after a
# reset (warm or cold).
proc cycv_c1 {{target fpgasoc.cpu.0} {enable 1}} {
    set MPUMODRST_ADDR "0xffd05010"
	
	if {$enable} {
		echo "cycv_c1: Enabling core 1"
		$target mww phys $MPUMODRST_ADDR 0x00000000
	} else {
		echo "cycv_c1: Disabling core 1"
		$target mww phys $MPUMODRST_ADDR 0x00000002
	}
}

# The JTAG on the Cyclone V does not have pins for TRST and SRST, and when not
# present normally OpenOCD defaults to using the 5 cycles of TCK with TMS high
# to do a TRST, but it doesn't seem to work on Cyclone V SoC. As an alternative,
# this procedure will reset the Cyclone V SoC HPS (CPU system) using the Reset
# Manager module (see Cyclone V SoC HPS technical manual).
# Reset the HPS
proc cycv_reset {{target fpgasoc.cpu.0}} {
    # Parameters
    set CTRL_ADDR "0xffd05004"

    # Let's leave this for the caller to do
    #init
    #halt

    # Soft reset all CPU cores using the Cyclone V HPS Reset Manager CTRL memory-mapped register
    echo "cycv_reset: Soft resetting.."
    $target mww phys $CTRL_ADDR 0x00100002

	# Reset will resume CPU execution, so we need a halt to restore it back
    halt
	
	# Note: This reset doesn't generate an event so you would need to manually call cortex_a dbginit
    $target cortex_a dbginit
	# Use this if you want to use software breakpoints
    #$target cortex_a dacrfixup on
    # Use this if you want debug stepping to not jump into another interrupt, i.e. interrupts are disabled when stepping
    #$target cortex_a maskisr on
}

# When powered on, only the CPU OCRAM (On-Chip RAM) is accessible but we can use
# it to load and run U-Boot SPL. The DE10-Nano has 1GB of DDR SDRAM and many
# hardware peripherals (controllers), but they cannot be used until they are
# configured. This procedue will load and execute U-Boot SPL elf (located in
# your current directory) so that it can initialise the Cyclone V SoC hardware.
# Load and run U-Boot SPL
proc cycv_spl_init {uboot_file} {
    # Parameters for U-Boot SPL to run from HPS (CPU) OCRAM
    set SPL_ENTRY 0xffff0000

    #halt

    echo "cycv_spl_init: Loading U-Boot SPL.."
    load_image $uboot_file

    echo "cycv_spl_init: Executing U-Boot SPL at $SPL_ENTRY.."
    resume $SPL_ENTRY

    # Wait for the SPL to finish executing, i.e. it should reach the hang
    # function. An alternative solution is to put a break point at the end of
    # the SPL hang function, using the wait_halt command, remove break point,
	# then resume. I don't have the knowledge to get the address of the function
	# name in this script. Anyway, since the switch back to Eclipse IDE and
	# GDB is a bit slow, by the time GDB is ready to load the program to
	# debug, the SPL has already finished configuring the board.
    #sleep 200
}
