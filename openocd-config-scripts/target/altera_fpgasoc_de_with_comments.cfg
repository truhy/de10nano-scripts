# Altera cyclone V SoC family, 5Cxxx
# Note: This is for Intel/Terasic DE series boards, which has a different JTAG chain order: FPGA, DAP then CPU,
# to Altera/Arrow Cyclone V SocKit order: DAP, FPGA, then CPU

# ==========
# Procedures
# ==========

proc c5_dbginit {{target fpgasoc.cpu.0}} {
	echo "c5_dbginit: Issuing Cortex-A series debug initialisations"

	# General Cortex-A8/A9 debug initialisation
	$target cortex_a dbginit
	
	# Use this if you want to use software breakpoints
	$target cortex_a dacrfixup on
	
	# Use this if you want to debug step without jumping into another interrupt, i.e. interrupts are disabled when stepping
	#$target cortex_a maskisr on
}

# =============================================================================
# Support procedures for the Cyclone V SoC HPS (CPU system). Only tested on the
# DE-10 Nano development board but should work for the other Cyclone V
# development boards, e.g. DE1-SoC, DE10-Standard, Arrow SoCKit, etc.
# Dec 2023: Truong Hy
# =============================================================================

# Enable or disable MMU and cache. Note, does not invalidate.
# It is intended for turning off the cache when you have no other way.
#
# Uses OpenOCD generic Arm commands:
#		Read coprocessor : rd_value = arm mrc pX coproc op1 CRn CRm op2
#		Write coprocessor: arm mcr pX op1 CRn CRm op2 wr_value
#
# Example:
#		Read from the SCTLR coprocessor register and returns the result:
#			arm mrc 15 0 1 0 0
#		This is equivalent to assembly (<Rd> = output register):
#			MRC p15, 0, <Rd>, c1, c0, 0
#		Write to the SCTLR coprocessor register (<Wr> = write value):
#			arm mcr 15 0 1 0 0 <Wr>
#		This is equivalent to assembly (<Wr> = write value):
#			MCR p15, 0, <Wr>, c1, c0, 0
proc c5_cache {{enable 0} {target fpgasoc.cpu.0}} {
	set r [$target arm mrc 15 0 1 0 0]
	set mask [expr {1 << 12 | 1 << 11 | 1 << 2 | 1 << 0}]
	if {$enable == 0} {
		echo "c5_cache: Disabling MMU, i-cache & d-cache"
		set r [expr {($r & ~$mask)}]
	} else {
		echo "c5_cache: Enabling MMU, i-cache & d-cache"
		set r [expr {($r | $mask)}]
		echo $r
	}
	$target arm mcr 15 0 1 0 0 $r
}

# CPU core 1 (the second core) is held in reset by default, and also after a
# warm or cold reset is issued.	 This releases core 1, which will immediately
# run from address 0x0.
proc c5_core1 {{enable 1} {target fpgasoc.cpu.0}} {
	# MPU module reset register address
	set RSTMGR_MPUMODRST_ADDR 0xffd05010

	# Read MPU module reset register value into a variable
	set r [$target mdw phys $RSTMGR_MPUMODRST_ADDR]
	set r [expr 0x[lindex [split $r " "] 1]]

	if {$enable} {
		# Clear bit 2 of register value
		set mask [expr 0xfffffffd]
		set r [expr {($r & $mask)}]
		
		echo "c5_core1: Enabling core 1 (mww phys $RSTMGR_MPUMODRST_ADDR [format 0x%.8x $r])"
	} else {
		# Set bit 2 of register value
		set mask [expr 0x00000002]
		set r [expr {($r | $mask)}]
		
		echo "c5_core1: Disabling core 1 (mww phys $RSTMGR_MPUMODRST_ADDR [format 0x%.8x $r])"
	}
	# Put core 1 into selected state
	$target mww phys $RSTMGR_MPUMODRST_ADDR $r
}

# The JTAG on the Cyclone V does not have pins for TRST and SRST, and when not
# present OpenOCD defaults to using the 5 cycles of TCK with TMS high to do a
# TRST, but it doesn't seem to work on Cyclone V SoC. As an alternative, this
# procedure will reset the Cyclone V SoC HPS (CPU system) using the Reset
# Manager module (see Cyclone V SoC HPS technical manual) register.	 Either core
# can apply the reset.	Note, both core 0 and core 1 is reset, with core 1
# reheld in the reset (disabled) state again.
proc c5_reset {{cold 0} {target fpgasoc.cpu.0}} {
	# Reset manager register address
	set RSTMGR_CTRL_ADDR 0xffd05004

	# Let's leave this for the caller to do
	#init
	#halt

	# In case we're not in Arm mode
	arm core_state arm;
	
	# Read reset manager register value
	set r [$target mdw phys $RSTMGR_CTRL_ADDR]
	set r [expr 0x[lindex [split $r " "] 1]]

	if {$cold} {
		# Set bit 1 of register value
		set mask [expr 0x00000001]
		set r [expr {($r | $mask)}]
		
		echo "c5_reset: Cold resetting (mww phys $RSTMGR_CTRL_ADDR [format 0x%.8x $r])"
	} else {
		# Set bit 2 of register value
		set mask [expr 0x00000002]
		set r [expr {($r | $mask)}]
		
		echo "c5_reset: Soft resetting (mww phys $RSTMGR_CTRL_ADDR [format 0x%.8x $r])"
	}
	# Reset all CPU cores using the Cyclone V HPS Reset Manager CTRL memory-mapped register
	$target mww phys $RSTMGR_CTRL_ADDR $r

	# Note, a reset causes disconnection and triggers "examine-end" event
	# We need to give the reset run-time to actually reset
	sleep 25
	
	c5_dbginit $target
	#halt
	#arm core_state arm
}

# When powered on, only the HPS OCRAM (On-Chip RAM) is useable.	 The DE10-Nano
# has 1GB of DDR SDRAM and many hardware peripherals (controllers), but they
# cannot be used until they are configured. This procedue will load and execute
# U-Boot SPL elf (located in your current directory) using OCRAM so that it can
# initialise the Cyclone V SoC hardware.
proc c5_spl {uboot_file {spl_entry 0xffff0000}} {
	#halt

	# In case we're not in Arm mode
	arm core_state arm

	echo "c5_spl: Loading U-Boot SPL.."
	load_image $uboot_file

	echo "c5_spl: Executing U-Boot SPL at $spl_entry.."
	resume $spl_entry

	# Wait for the SPL to finish executing, i.e. it should reach the hang
	# function. An alternative solution is to put a break point at the end of
	# the SPL hang function by using the wait_halt command, remove break point,
	# then resume. I don't have the knowledge to get the address of the function
	# name in this script. Anyway, since the switch back to Eclipse IDE and
	# GDB is a bit slow, by the time GDB is ready to load the program to
	# debug the SPL has already finished configuring the board.
	#sleep 200
}

# Setup SMP and RTOS support.	 Default RTOS type is pseudo hwthread.	Note,
# core 1 must be released from reset for this to work.
proc c5_smp_setup {{rtos_type hwthread}} {
	global _CHIPNAME
	global _cores
	global _smp_command
	
	echo "c5_smp_setup: Setting up SMP support ($rtos_type)"
	
	eval $_smp_command
	
	for { set _core 0 } { $_core < $_cores } { incr _core } {
		set _TARGETNAME $_CHIPNAME.cpu.$_core
		$_TARGETNAME configure -rtos $rtos_type
	}
}

# =====
# Setup
# =====

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME fpgasoc
}

if { [info exists CHIPCORES] } {
	set _cores $CHIPCORES
} else {
	set _cores 2
}

if { [info exists FPGA_TAPID] } {
	set _FPGA_TAPID $FPGA_TAPID
	jtag newtap $_CHIPNAME.fpga tap -irlen 10 -ircapture 0x01 -irmask 0x3 -expected-id $_FPGA_TAPID
} else {
	# Declares a new JTAG TAP that will connect if the IDCODE matches with one in the list of expected-id (See Ch9 of Cyclone V Device Handbook)
	jtag newtap $_CHIPNAME.fpga tap -irlen 10 -ircapture 0x01 -irmask 0x3 \
		-expected-id 0x02b150dd \
		-expected-id 0x02b050dd \
		-expected-id 0x02b220dd \
		-expected-id 0x02b130dd \
		-expected-id 0x02b140dd \
		-expected-id 0x02b010dd \
		-expected-id 0x02b120dd \
		-expected-id 0x02b020dd \
		-expected-id 0x02b030dd \
		-expected-id 0x02b040dd \
		-expected-id 0x02b020dd \
		-expected-id 0x02b030dd \
		-expected-id 0x02b040dd \
		-expected-id 0x02d110dd \
		-expected-id 0x02d010dd \
		-expected-id 0x02d120dd \
		-expected-id 0x02d020dd \
		-expected-id 0x02d110dd \
		-expected-id 0x02d010dd \
		-expected-id 0x02d120dd \
		-expected-id 0x02d020dd \
		-expected-id 0x02d120dd \
		-expected-id 0x02d020dd
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID] } {
	set _DAP_TAPID $DAP_TAPID
} else {
	set _DAP_TAPID 0x4ba00477
}
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x01 -irmask 0x0f -expected-id $_DAP_TAPID

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

# MEM-AP for memory access
#target create $_CHIPNAME.ap mem_ap -dap $_CHIPNAME.dap -ap-num 0

# Base addresses of CoreSight Debug and Cross-Trigger Interface for each of the cores
set _DBGBASE { 0x80110000 0x80112000 }
#set _CTIBASE { 0x80118000 0x80119000 }

set _smp_command "target smp"

for { set _core 0 } { $_core < $_cores } { incr _core } {
	#set _CTINAME $_CHIPNAME.cti$_core
	set _TARGETNAME $_CHIPNAME.cpu.$_core

	# CTI is unsupported because the Cyclone V's OpenOCD code for the target create does not currently implement -ap-num parameter (it's missing)
	#cti create $_CTINAME -dap $_CHIPNAME.dap -ap-num 0 -baseaddr [lindex $_CTIBASE $_core]
	
	target create $_TARGETNAME cortex_a -dap $_CHIPNAME.dap -coreid $_core -dbgbase [lindex $_DBGBASE $_core]
	$_TARGETNAME configure -event reset-assert-post { c5_dbginit $_TARGETNAME }

	# Generate SMP command: target smp ...
	set _smp_command "$_smp_command $_TARGETNAME"
}

# Oddly, OpenOCD selects the highest core as default, we want the first core
targets $_CHIPNAME.cpu.0

# Enable core 1 automatically
#init
#halt
#c5_core1
#resume
